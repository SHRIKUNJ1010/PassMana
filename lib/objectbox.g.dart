// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/card_model.dart';
import 'model/group_model.dart';
import 'model/password_model.dart';
import 'model/secret_note_model.dart';
import 'model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2379576262382179893),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(6, 618954020366196552),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5352280719198626775),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 986270443974672897),
            name: 'pin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1167460715826724220),
            name: 'isBiometricEnabled',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1658336171682286313),
            name: 'isAutofillEnabled',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 618954020366196552),
            name: 'localeString',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7022352903906742617),
      name: 'Group',
      lastPropertyId: const obx_int.IdUid(5, 2488162487370813123),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4065844036565779166),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1664889290613067532),
            name: 'groupName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3294534142306290642),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7786535575115060581),
            name: 'createdOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2488162487370813123),
            name: 'lastUpdatedOn',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'passwords', srcEntity: 'Password', srcField: 'group')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6243334753350276209),
      name: 'Password',
      lastPropertyId: const obx_int.IdUid(12, 2236766573529191337),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5428819418602381393),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3932673885070513494),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4755622282995748104),
            name: 'subTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4686609453007835310),
            name: 'userName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7205940068219850615),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2104709478361974975),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6132687139176641847),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 2431947868288706786),
            relationTarget: 'Group'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6634348962119217579),
            name: 'createdOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 75545063630210098),
            name: 'lastUpdatedOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1662591505840291357),
            name: 'websiteUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2236766573529191337),
            name: 'dynamicDataField',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7319612359426061167),
      name: 'Card',
      lastPropertyId: const obx_int.IdUid(11, 4609532295148843109),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3923624425905033178),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1976595611956823025),
            name: 'bankAndCardName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5172812700472783797),
            name: 'cardNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9098147579021319787),
            name: 'cardHolderName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7283837161105017108),
            name: 'cvv',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 934914539446613746),
            name: 'cardPin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 892688795755671774),
            name: 'createdOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4301313653865467201),
            name: 'lastUpdatedOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1738504638277915009),
            name: 'expiryDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4609532295148843109),
            name: 'securityGridNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4333211291667404215),
      name: 'SecretNote',
      lastPropertyId: const obx_int.IdUid(4, 4783214407881965047),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3886065542503847877),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 888198510703763420),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7489765409637473024),
            name: 'createdOn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4783214407881965047),
            name: 'lastUpdatedOn',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 4333211291667404215),
      lastIndexId: const obx_int.IdUid(1, 2431947868288706786),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3417414018983795265,
        2322565834328061491,
        687379100988768860
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final pinOffset = fbb.writeString(object.pin);
          final localeStringOffset = fbb.writeString(object.localeString);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pinOffset);
          fbb.addBool(3, object.isBiometricEnabled);
          fbb.addBool(4, object.isAutofillEnabled);
          fbb.addOffset(5, localeStringOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final pinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isBiometricEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final isAutofillEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final localeStringParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = User(
              id: idParam,
              pin: pinParam,
              isBiometricEnabled: isBiometricEnabledParam,
              isAutofillEnabled: isAutofillEnabledParam,
              localeString: localeStringParam);

          return object;
        }),
    Group: obx_int.EntityDefinition<Group>(
        model: _entities[1],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {
              obx_int.RelInfo<Password>.toOneBacklink(
                      7, object.id, (Password srcObject) => srcObject.group):
                  object.passwords
            },
        getId: (Group object) => object.id,
        setId: (Group object, int id) {
          object.id = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final groupNameOffset = fbb.writeString(object.groupName);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, groupNameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.createdOn.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdatedOn.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final groupNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final createdOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = Group(
              id: idParam,
              groupName: groupNameParam,
              description: descriptionParam,
              createdOn: createdOnParam,
              lastUpdatedOn: lastUpdatedOnParam);
          obx_int.InternalToManyAccess.setRelInfo<Group>(
              object.passwords,
              store,
              obx_int.RelInfo<Password>.toOneBacklink(
                  7, object.id, (Password srcObject) => srcObject.group));
          return object;
        }),
    Password: obx_int.EntityDefinition<Password>(
        model: _entities[2],
        toOneRelations: (Password object) => [object.group],
        toManyRelations: (Password object) => {},
        getId: (Password object) => object.id,
        setId: (Password object, int id) {
          object.id = id;
        },
        objectToFB: (Password object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final subTitleOffset = fbb.writeString(object.subTitle);
          final userNameOffset = fbb.writeString(object.userName);
          final passwordOffset = fbb.writeString(object.password);
          final noteOffset = fbb.writeString(object.note);
          final websiteUrlOffset = fbb.writeString(object.websiteUrl);
          final dynamicDataFieldOffset =
              fbb.writeString(object.dynamicDataField);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, subTitleOffset);
          fbb.addOffset(3, userNameOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.addOffset(5, noteOffset);
          fbb.addInt64(6, object.group.targetId);
          fbb.addInt64(8, object.createdOn.millisecondsSinceEpoch);
          fbb.addInt64(9, object.lastUpdatedOn.millisecondsSinceEpoch);
          fbb.addOffset(10, websiteUrlOffset);
          fbb.addOffset(11, dynamicDataFieldOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final subTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final websiteUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final dynamicDataFieldParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final createdOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final lastUpdatedOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final object = Password(
              id: idParam,
              title: titleParam,
              subTitle: subTitleParam,
              websiteUrl: websiteUrlParam,
              userName: userNameParam,
              password: passwordParam,
              note: noteParam,
              dynamicDataField: dynamicDataFieldParam,
              createdOn: createdOnParam,
              lastUpdatedOn: lastUpdatedOnParam);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.group.attach(store);
          return object;
        }),
    Card: obx_int.EntityDefinition<Card>(
        model: _entities[3],
        toOneRelations: (Card object) => [],
        toManyRelations: (Card object) => {},
        getId: (Card object) => object.id,
        setId: (Card object, int id) {
          object.id = id;
        },
        objectToFB: (Card object, fb.Builder fbb) {
          final bankAndCardNameOffset = fbb.writeString(object.bankAndCardName);
          final cardNumberOffset = fbb.writeString(object.cardNumber);
          final cardHolderNameOffset = fbb.writeString(object.cardHolderName);
          final cvvOffset = fbb.writeString(object.cvv);
          final cardPinOffset = fbb.writeString(object.cardPin);
          final expiryDateOffset = fbb.writeString(object.expiryDate);
          final securityGridNumberOffset =
              fbb.writeString(object.securityGridNumber);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bankAndCardNameOffset);
          fbb.addOffset(2, cardNumberOffset);
          fbb.addOffset(3, cardHolderNameOffset);
          fbb.addOffset(4, cvvOffset);
          fbb.addOffset(5, cardPinOffset);
          fbb.addInt64(6, object.createdOn.millisecondsSinceEpoch);
          fbb.addInt64(7, object.lastUpdatedOn.millisecondsSinceEpoch);
          fbb.addOffset(9, expiryDateOffset);
          fbb.addOffset(10, securityGridNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final bankAndCardNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final cardNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cardHolderNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final cardPinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final cvvParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final expiryDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final securityGridNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final createdOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final lastUpdatedOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = Card(
              id: idParam,
              bankAndCardName: bankAndCardNameParam,
              cardNumber: cardNumberParam,
              cardHolderName: cardHolderNameParam,
              cardPin: cardPinParam,
              cvv: cvvParam,
              expiryDate: expiryDateParam,
              securityGridNumber: securityGridNumberParam,
              createdOn: createdOnParam,
              lastUpdatedOn: lastUpdatedOnParam);

          return object;
        }),
    SecretNote: obx_int.EntityDefinition<SecretNote>(
        model: _entities[4],
        toOneRelations: (SecretNote object) => [],
        toManyRelations: (SecretNote object) => {},
        getId: (SecretNote object) => object.id,
        setId: (SecretNote object, int id) {
          object.id = id;
        },
        objectToFB: (SecretNote object, fb.Builder fbb) {
          final noteOffset = fbb.writeString(object.note);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, noteOffset);
          fbb.addInt64(2, object.createdOn.millisecondsSinceEpoch);
          fbb.addInt64(3, object.lastUpdatedOn.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final lastUpdatedOnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = SecretNote(
              id: idParam,
              note: noteParam,
              createdOn: createdOnParam,
              lastUpdatedOn: lastUpdatedOnParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.pin].
  static final pin = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.isBiometricEnabled].
  static final isBiometricEnabled =
      obx.QueryBooleanProperty<User>(_entities[0].properties[2]);

  /// See [User.isAutofillEnabled].
  static final isAutofillEnabled =
      obx.QueryBooleanProperty<User>(_entities[0].properties[3]);

  /// See [User.localeString].
  static final localeString =
      obx.QueryStringProperty<User>(_entities[0].properties[4]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// See [Group.id].
  static final id = obx.QueryIntegerProperty<Group>(_entities[1].properties[0]);

  /// See [Group.groupName].
  static final groupName =
      obx.QueryStringProperty<Group>(_entities[1].properties[1]);

  /// See [Group.description].
  static final description =
      obx.QueryStringProperty<Group>(_entities[1].properties[2]);

  /// See [Group.createdOn].
  static final createdOn =
      obx.QueryDateProperty<Group>(_entities[1].properties[3]);

  /// See [Group.lastUpdatedOn].
  static final lastUpdatedOn =
      obx.QueryDateProperty<Group>(_entities[1].properties[4]);

  /// see [Group.passwords]
  static final passwords =
      obx.QueryBacklinkToMany<Password, Group>(Password_.group);
}

/// [Password] entity fields to define ObjectBox queries.
class Password_ {
  /// See [Password.id].
  static final id =
      obx.QueryIntegerProperty<Password>(_entities[2].properties[0]);

  /// See [Password.title].
  static final title =
      obx.QueryStringProperty<Password>(_entities[2].properties[1]);

  /// See [Password.subTitle].
  static final subTitle =
      obx.QueryStringProperty<Password>(_entities[2].properties[2]);

  /// See [Password.userName].
  static final userName =
      obx.QueryStringProperty<Password>(_entities[2].properties[3]);

  /// See [Password.password].
  static final password =
      obx.QueryStringProperty<Password>(_entities[2].properties[4]);

  /// See [Password.note].
  static final note =
      obx.QueryStringProperty<Password>(_entities[2].properties[5]);

  /// See [Password.group].
  static final group =
      obx.QueryRelationToOne<Password, Group>(_entities[2].properties[6]);

  /// See [Password.createdOn].
  static final createdOn =
      obx.QueryDateProperty<Password>(_entities[2].properties[7]);

  /// See [Password.lastUpdatedOn].
  static final lastUpdatedOn =
      obx.QueryDateProperty<Password>(_entities[2].properties[8]);

  /// See [Password.websiteUrl].
  static final websiteUrl =
      obx.QueryStringProperty<Password>(_entities[2].properties[9]);

  /// See [Password.dynamicDataField].
  static final dynamicDataField =
      obx.QueryStringProperty<Password>(_entities[2].properties[10]);
}

/// [Card] entity fields to define ObjectBox queries.
class Card_ {
  /// See [Card.id].
  static final id = obx.QueryIntegerProperty<Card>(_entities[3].properties[0]);

  /// See [Card.bankAndCardName].
  static final bankAndCardName =
      obx.QueryStringProperty<Card>(_entities[3].properties[1]);

  /// See [Card.cardNumber].
  static final cardNumber =
      obx.QueryStringProperty<Card>(_entities[3].properties[2]);

  /// See [Card.cardHolderName].
  static final cardHolderName =
      obx.QueryStringProperty<Card>(_entities[3].properties[3]);

  /// See [Card.cvv].
  static final cvv = obx.QueryStringProperty<Card>(_entities[3].properties[4]);

  /// See [Card.cardPin].
  static final cardPin =
      obx.QueryStringProperty<Card>(_entities[3].properties[5]);

  /// See [Card.createdOn].
  static final createdOn =
      obx.QueryDateProperty<Card>(_entities[3].properties[6]);

  /// See [Card.lastUpdatedOn].
  static final lastUpdatedOn =
      obx.QueryDateProperty<Card>(_entities[3].properties[7]);

  /// See [Card.expiryDate].
  static final expiryDate =
      obx.QueryStringProperty<Card>(_entities[3].properties[8]);

  /// See [Card.securityGridNumber].
  static final securityGridNumber =
      obx.QueryStringProperty<Card>(_entities[3].properties[9]);
}

/// [SecretNote] entity fields to define ObjectBox queries.
class SecretNote_ {
  /// See [SecretNote.id].
  static final id =
      obx.QueryIntegerProperty<SecretNote>(_entities[4].properties[0]);

  /// See [SecretNote.note].
  static final note =
      obx.QueryStringProperty<SecretNote>(_entities[4].properties[1]);

  /// See [SecretNote.createdOn].
  static final createdOn =
      obx.QueryDateProperty<SecretNote>(_entities[4].properties[2]);

  /// See [SecretNote.lastUpdatedOn].
  static final lastUpdatedOn =
      obx.QueryDateProperty<SecretNote>(_entities[4].properties[3]);
}
